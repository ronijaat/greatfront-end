/**
 * @param {Array<any>} iterable
 * @param {Function} callbackFn
 *
 * @return {Promise}
 */
export default function mapAsync(iterable, callbackFn) {
  return Promise.all(iterable.map(callbackFn))
}

---------------------------
/**
 * @param {Array<any>} iterable
 * @param {Function} callbackFn
 *
 * @return {Promise}
 */
export default function mapAsync(iterable, callbackFn) {
  return new Promise((resolve,reject)=>{
    const results = new Array(iterable.length);
    let unresolved = iterable.length;

    if(unresolved === 0) {
      resolve(results);
      return;
    }
    iterable.forEach((item,idx)=>{
      callbackFn(item)
        .then((value)=>{
          results[idx] = value;
          unresolved -=1;

          if(unresolved === 0){
            resolve(results);
          }
        })
        .catch((err)=>reject(err));
  })
  })
}
