/**
 * @param {any} thisArg
 * @param {...*} argArray
 * @return {Function}
 */
Function.prototype.myBind = function (thisArg, ...argArray) {
  const originalMethod = this;
  return function(...args){
    return originalMethod.apply(thisArg,[...argArray,...args])
  }
};

-------------------------------------
easy of below one
Function.prototype.myBind = function (thisArg, argArray=[]) {
    thisArg.fn = this;
    return function(){
          return thisArg.fn(argArray)
    }
}

------------------------------------

Function.prototype.myBind = function (thisArg, ...argArray) {
  const sym = Symbol();
  const wrapperObj = Object(thisArg);
  Object.defineProperty(wrapperObj,sym,{
    enumerable:false,
    value : this,
  })
  return function(...args){
    return wrapperObj[sym](...argArray,...args);
  }
};

-------------------------------------------

Function.prototype.myBind = function (thisArg, ...argArray) {
  const originalFunc = this
  return function(...args){
    return Reflect.apply(originalFunc,thisArg,[...argArray,...args]);
  }
};
